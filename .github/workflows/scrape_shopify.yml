name: Run Shopify Scraper and Upload to Google Drive

on:
  schedule:
    - cron: '0 0 * * *'  # Every day at 00:00 UTC / 5:30 AM IST
  workflow_dispatch:

jobs:
  scrape_and_upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install PyDrive2

      - name: Run scraper script and capture filename
        id: run_script
        run: |
          python shopify_reviews_2.py
          LATEST_CSV=$(ls -t *.csv | head -1)
          if [ -z "$LATEST_CSV" ]; then
            echo "Error: No CSV file was generated by shopify_reviews_2.py."
            exit 1
          fi
          echo "Generated CSV: $LATEST_CSV"
          echo "csv_file=$LATEST_CSV" >> $GITHUB_OUTPUT

      - name: Setup PyDrive2 credentials
        run: |
          mkdir -p ~/.config/pydrive
          echo '${{ secrets.GDRIVE_SERVICE_ACCOUNT_KEY }}' > ~/.config/pydrive/credentials.json
        env:
          GDRIVE_SERVICE_ACCOUNT_KEY: ${{ secrets.GDRIVE_SERVICE_ACCOUNT_KEY }}

      - name: Upload CSV to Google Drive
        run: |
          echo 'import os
from pydrive2.auth import GoogleAuth
from pydrive2.drive import GoogleDrive

gauth = GoogleAuth()
gauth.LoadServiceConfigSettings()
gauth.AuthFromServiceAccount()
drive = GoogleDrive(gauth)

folder_id = "15gVrByonzFvBMGxJ4NUvVXzCgEUVB1Se"
csv_filename = os.getenv("CSV_FILENAME")

if not csv_filename or not os.path.exists(csv_filename):
    print(f"Error: CSV file not found or filename not provided: {csv_filename}")
    exit(1)

print(f"Uploading: {csv_filename} to Google Drive folder {folder_id}")
file_list = drive.ListFile({"q": f"\'{folder_id}\' in parents and trashed=false"}).GetList()
existing_file_id = None
for file_in_drive in file_list:
    if file_in_drive["title"] == csv_filename:
        existing_file_id = file_in_drive["id"]
        break

if existing_file_id:
    file_to_upload = drive.CreateFile({"id": existing_file_id})
    file_to_upload.SetContentFile(csv_filename)
    file_to_upload.Upload()
    print(f"Updated: {csv_filename}")
else:
    file_to_upload = drive.CreateFile({
        "title": csv_filename,
        "parents": [{"id": folder_id}]
    })
    file_to_upload.SetContentFile(csv_filename)
    file_to_upload.Upload()
    print(f"Created: {csv_filename}")
' > upload_to_drive.py

          python upload_to_drive.py
        env:
          CSV_FILENAME: ${{ steps.run_script.outputs.csv_file }}
